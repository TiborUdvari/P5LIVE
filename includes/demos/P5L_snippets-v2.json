{
	"new" : {
	"gt": "",
	"s": "",
	"dt": "",
	"db": "",
	"gb": "",
	"demo": "true"
	}
	,"audio": {
		"gt": "",
		"s": "setupAudio()",
		"dt": "/* audio vars: amp, ampEase, fft, waveform */\nupdateAudio()",
		"db": "",
		"gb": "/* AUDIO INIT */\nlet mic, fftRaw, fft = [], waveform = [], amp = 0.0, ampStereo = {l:0.0, r:0.0},\nampEase = 0.0,\nnumBins = 512,\nbands = 12; \n\nfunction setupAudio() {\nuserStartAudio();\nmic = new p5.AudioIn();\nmic.start();\nfftRaw = new p5.FFT(0.75, numBins);\nfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\nfftRaw.analyze(); \namp = mic.getLevel() * 1000; // average mixed amplitude\nampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\nampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\nampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\nwaveform = fftRaw.waveform(); // array (-1, 1)\nfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}",
		"demo": "true"
	}
	,"font": {
		"gt": "let font\n\nfunction preload() {\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\")\n}",
		"s": "textFont(font)",
		"dt": "",
		"db": "",
		"gb": "",
		"demo": "true"
	}
	,"osc": {
		"gt": "let libs = [\"includes/js/socket.io.js\"];\nlet socket;",
		"s": "setupOsc('127.0.0.1', 12000, 12001); // oscHost, oscPortIn, oscPortOut",
		"dt": "",
		"db": "",
		"gb": "\n// OSC LOGIC \nfunction receiveOsc(address, value) {\n\t// print('in: ' + address + ', ' +value)\n}\n\nfunction sendOsc(address, value) {\n\tif(socket != undefined) {\n\t\tsocket.emit('message', [address].concat(value));\n\t}\n}\n\nfunction setupOsc(oscHost, oscPortIn, oscPortOut) {\n\tsocket = io.connect('http://127.0.0.1:8082');\n\tsocket.on('connect', function() {\n\t\tsocket.emit('config', {\n\t\t\tserver: {\n\t\t\t\thost: oscHost,\n\t\t\t\tport: oscPortIn\n\t\t\t},\n\t\t\tclient: {\n\t\t\t\thost: oscHost,\n\t\t\t\tport: oscPortOut\n\t\t\t}\n\t\t});\n\t\tprint('OSC Ready!\\n' + oscHost + ', listen: ' + oscPortIn + ', send: ' + oscPortOut);\n\t});\n\tsocket.on('message', function(msg) {\n\t\treceiveOsc(msg[0], msg.splice(1));\n\t});\n}",
		"demo": "true"
	}
	,"midi":{
		"gt": "/*\t\n\t_input_midi v2.1 - 06.07.23\n\n\tUsage:\n\t- plug in midi device, run code\n\t- view Javascript Console for list of attached IN/OUT devices\n\t- set PREFS below with based on [ID] or \"name\"\n*/\n\n/* PREFS */\nlet midiDeviceIn = 0 // [ID] or \"device name\"\nlet midiDeviceOut = 0 // [ID] or \"device name\"\nlet midiThru = false // optionally pass all in -> out\n\nlet libs = [\"includes/js/webmidi.min.js\"]\nlet midiInput, midiOutput, midiMsg = {}\n",
		"s": "\tsetupMidi(midiDeviceIn, midiDeviceOut) // deviceIn, deviceOut",
		"dt": "",
		"db": "",
		"gb": "/* MIDI TRIGGERS (edit this) */\nfunction noteOn(note) {\n\t// use note.type, .channel, .name, .number, .octave, .velocity\n\t// print(note) // debug\n\n\t// map midi keyboard to bars across width\n\tlet x = map(note.number, 0, 128, 0, width)\n\tlet h = map(note.velocity, 0, 128, 0, height)\n\tpush()\n\tnoStroke()\n\tfill(note.velocity * 2)\n\trectMode(CENTER)\n\trect(x, height / 2, width / 128, h)\n\tpop()\n}\n\nfunction noteOff(note) {\n\t// use note.type, .channel, .name, .number, .octave, .velocity\n\t// print(note) // debug\n}\n\nfunction pitchBend(pitch) {\n\t// use pitch.type, .channel, .value\n\t// print(pitch) // debug\n}\n\nfunction controlChange(control) {\n\t// use control.type, .channel, .controllerNumber, .controllerName, .value\n\t// print(control) // debug\n}\n\n// function mousePressed() {\n// \t// example of sending midi note\n// \t// sendNote(1, \"C\", 3, 1000, 127); // channel, note, octave, duration, velocity\n// }\n\n\n\n/* MIDI FUNCTIONS (only edit for advanced changes) */\nfunction midiToFreq(noteNumber) {\n\treturn 440 * Math.pow(2, (noteNumber - 69) / 12)\n}\n\nfunction sendNote(channel, note, octave, duration, velocity) {\n\tmidiOutput.playNote(note + octave, channel, {\n\t\tduration: duration,\n\t\tvelocity: parseFloat(velocity) / 127.0\n\t})\n}\n\nfunction parseMidi(mm) {\n\t//print(mm)\n\tif(mm.note != undefined) {\n\t\tswitch (mm.note.type) {\n\t\t\tcase 'noteon':\n\t\t\t\tnoteOn(mm.note)\n\t\t\t\tbreak;\n\t\t\tcase 'noteoff':\n\t\t\t\tnoteOff(mm.note)\n\t\t\t\tbreak;\n\t\t}\n\t} else if(mm.pitch != undefined) {\n\t\tpitchBend(mm.pitch)\n\t} else if(mm.control != undefined) {\n\t\tcontrolChange(mm.control)\n\t}\n}\n\nfunction setupMidi(idIn, idOut) {\n\tWebMidi.enable(function(err) {\n\t\tif(err) {\n\t\t\tconsole.log(\"WebMidi could not be enabled.\", err);\n\t\t}\n\n\t\t// Print to console available MIDI in/out id/names\n\t\tWebMidi.inputs.forEach(function(element, c) {\n\t\t\tprint(`IN  [${c}] \"${element.name}\"`)\n\t\t});\n\t\tWebMidi.outputs.forEach(function(element, c) {\n\t\t\tprint(`OUT [${c}] \"${element.name}\"`)\n\t\t});\n\n\t\t// assign in channel:\n\t\tif(typeof idIn === 'number') {\n\t\t\tmidiInput = WebMidi.inputs[idIn]\n\t\t} else {\n\t\t\tmidiInput = WebMidi.getInputByName(idIn)\n\t\t}\n\n\t\tif(typeof idOut === 'number') {\n\t\t\tmidiOutput = WebMidi.outputs[idOut]\n\t\t} else {\n\t\t\tmidiOutput - WebMidi.getOutputByName(idOut)\n\t\t}\n\n\t\tmidiInput.addListener('midimessage', 'all', function(e) {\n\t\t\tif(midiThru) {\n\t\t\t\tif(e.data.length == 3) {\n\t\t\t\t\tmidiOutput.send(e.data[0], [e.data[1], e.data[2]])\n\t\t\t\t} else {\n\t\t\t\t\tmidiOutput.send(e.data[0])\n\t\t\t\t}\n\t\t\t}\n\t\t\tmidiMsg = {}\n\t\t\tmidiMsg.data = e.data\n\t\t\tmidiMsg.timestamp = e.timestamp\n\t\t\t// parseMidi(midiMsg) // optionally send raw only\n\t\t})\n\n\t\t// noteOn\n\t\tmidiInput.addListener('noteon', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteon'\n\t\t\t}\n\t\t\tnote.channel = e.channel\n\t\t\tnote.number = e.note.number\n\t\t\tnote.name = e.note.name\n\t\t\tnote.octave = e.note.octave\n\t\t\tnote.velocity = floor(127 * e.velocity)\n\n\t\t\tmidiMsg.note = note\n\t\t\tparseMidi(midiMsg)\n\t\t})\n\n\t\t// noteOff\n\t\tmidiInput.addListener('noteoff', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteoff'\n\t\t\t}\n\t\t\tnote.channel = e.channel\n\t\t\tnote.number = e.note.number\n\t\t\tnote.name = e.note.name\n\t\t\tnote.octave = e.note.octave\n\t\t\tnote.velocity = 0\n\n\t\t\tmidiMsg.note = note\n\t\t\tparseMidi(midiMsg)\n\t\t})\n\n\t\t// pitchBend\n\t\tmidiInput.addListener('pitchbend', \"all\", function(e) {\n\t\t\tlet pitch = {\n\t\t\t\ttype: 'pitchbend'\n\t\t\t}\n\t\t\tpitch.channel = e.channel\n\t\t\tpitch.value = floor(127 * e.value)\n\n\t\t\tmidiMsg.pitch = pitch\n\t\t\tparseMidi(midiMsg)\n\t\t})\n\n\t\t// controlChange\n\t\tmidiInput.addListener('controlchange', \"all\", function(e) {\n\t\t\tlet control = {\n\t\t\t\ttype: 'controlchange'\n\t\t\t}\n\t\t\tcontrol.channel = e.channel\n\t\t\tcontrol.controllerNumber = e.controller.number\n\t\t\tcontrol.controllerName = e.controller.name\n\t\t\tcontrol.value = e.value\n\n\t\t\tmidiMsg.control = control\n\t\t\tparseMidi(midiMsg)\n\t\t})\n\n\t})\n}",
		"demo": "true"
	} 
	,"hydra-overlay": {
		"gt": "let libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js']\n\nlet pg, hc = document.createElement('canvas')\nhc.width = window.innerWidth\nhc.height = window.innerHeight\ndocument.body.appendChild(hc)\n\nlet hydra = new Hydra({\n\tdetectAudio: false,\n\tcanvas: hc\n})\n\n// sandbox - start\nsrc(s0)\n\t.modulate(osc(10))\n\t.out()\n// sandbox - stop\n",
		"s": "\t// var cnv = createCanvas(windowWidth, windowHeight)\n\t// cnv.hide() // hide p5 canvas to fix mouseY issue\n\n\ts0.init({src: drawingContext.canvas})\n\tpg = createGraphics(hc.width, hc.height)",
		"dt": "\n\tpg.drawingContext.drawImage(hc, 0, 0, pg.width, pg.height) // hydra as image",
		"db": "",
		"gb": "function keyPressed() {\n\tif(key == 'S') {\n\t\tpg.save('P5LIVE_hydra.png') // save hydra texture\n\t}\n}",
		"demo": "true"
	}
	,"HY5_p5_hydra": {
		"gt": "let libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js', 'https://cdn.jsdelivr.net/gh/ffd8/hy5@main/hy5.js', 'includes/libs/hy5.js']\n\n// sandbox - start\nH.pixelDensity(1) // 2 = retina, set <= 1 if laggy\n\ns0.initP5() // send p5 to hydra\n// P5.toggle(0) // optionally hide p5\n\nsrc(s0)\n\t// .modulate(noize())\n\t.out()\n// sandbox - end\n",
		"s": "",
		"dt": "",
		"db": "",
		"gb": "",
		"demo": "true"
	}
	,"HY5_hydra_p5": {
		"gt": "let libs = ['https://unpkg.com/hydra-synth', 'includes/libs/hydra-synth.js', 'https://cdn.jsdelivr.net/gh/ffd8/hy5@main/hy5.js', 'includes/libs/hy5.js']\n\n// sandbox - start\n// H.pixelDensity(2) // 2 = retina, set <= 1 if laggy\n// H.toggle(0) // hide hydra\nP5.zIndex(1) // set p5 above hydra\ns0.initP5() // bring p5 into hydra\n\nosc()\n\t.out()\n// sandbox - end\n",
		"s": "// createCanvas(windowWidth, windowHeight, WEBGL) // for 3D texture/shapes",
		"dt": "let tex = H.get()\n// texture(tex)\n// sphere(height/3) // use WEBGL in setup\n",
		"db": "",
		"gb": "",
		"demo": "true"
	}	
}
				
